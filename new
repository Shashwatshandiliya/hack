// src/components/EntitlementUserView/EntitlementUserView.tsx
import * as React from "react";
import axios from "axios";
import Grid from "@mui/material/Grid";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import MaterialTable from "../../../Root/components/MaterialTable";
import {
  InputAdornment,
  TextField,
  Typography,
  CircularProgress,
  Divider,
  Autocomplete,
} from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import SearchIcon from "@mui/icons-material/Search";
import { Tabs } from "antd";
import Drawer from "@mui/material/Drawer";
import styles from "./EntitlementUserView.module.css";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";

const { TabPane } = Tabs;

interface AccountRow {
  accountOwner: string;
  accountName: string;
  accountType: string;
  accessRoles: { roleName: string }[];
  accountStatus: string;
}

interface EntitlementRow {
  entitlementName: string;
  entitlementDescription: string;
  entitlementOwner: string;
  isPrivileged: string;
}

export default function EntitlementUserView({
  onNavigate,
  onEditAccount,
}: {
  onNavigate?: (tab: string) => void;
  onEditAccount?: (id: string) => void;
}) {
  const [activeTab, setActiveTab] = React.useState<"1" | "2">("1");
  const [drawerOpen, setDrawerOpen] = React.useState(false);
  const [drawerData, setDrawerData] = React.useState<any>(null);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [selectedApp, setSelectedApp] = React.useState("SAIL");
  const [appList, setAppList] = React.useState<string[]>([]);

  const [accounts, setAccounts] = React.useState<AccountRow[]>([]);
  const [entitlements, setEntitlements] = React.useState<EntitlementRow[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState("");

  const loadAppList = async () => {
    try {
      const { data } = await axios.get("http://mc.shashwat.com:69696/allappplciation");
      const appNames = data.map((app: any) => app.appName);
      setAppList(appNames);
    } catch {
      setError("Failed to load application list");
    }
  };

  const loadAllAccounts = async () => {
    setError("");
    try {
      setLoading(true);
      const { data } = await axios.get(
        `https://uklvauems02a.uk.standardchartered.com:32447/restService/onecert/v1/account?currentPage=1&pageSize=10`,
        {
          headers: { applicationName: selectedApp }
        }
      );
      setAccounts(data.accounts || []);
    } catch {
      setError("Failed to load accounts");
    } finally {
      setLoading(false);
    }
  };

  const loadAllEntitlements = async () => {
    setError("");
    try {
      setLoading(true);
      const { data } = await axios.get(
        `http://mc.shashwat.com:69696/restService/one/entity`,
        {
          headers: { applicationName: selectedApp }
        }
      );
      setEntitlements(data.entitlements || []);
    } catch {
      setError("Failed to load entitlements");
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = async () => {
    setError("");
    if (!searchTerm) {
      activeTab === "1" ? loadAllAccounts() : loadAllEntitlements();
      return;
    }
    try {
      setLoading(true);
      if (activeTab === "1") {
        const { data } = await axios.get(
          `http://mc.shashwat.com:69696/restService/one/account/${searchTerm}`
        );
        setAccounts(data ? [data] : []);
      } else {
        const { data } = await axios.get(
          `http://mc.shashwat.com:69696/restService/one/entitlement/${searchTerm}`
        );
        setEntitlements(data ? [data] : []);
      }
    } catch {
      setError("No results found");
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    loadAppList();
  }, []);

  React.useEffect(() => {
    if (activeTab === "1") loadAllAccounts();
    else loadAllEntitlements();
  }, [activeTab, selectedApp]);

  const headCellsAccounts = [
    { accessorKey: "accountOwner", header: "Account Owner" },
    { accessorKey: "accountName", header: "Account Name" },
    {
      accessorKey: "accessRoles",
      header: "Roles",
      Cell: ({ cell }: any) =>
        (cell.getValue() as { roleName: string }[])
          .map((r) => r.roleName)
          .join(", "),
    },
    {
      accessorKey: "accountStatus",
      header: "Status",
      Cell: ({ cell }: any) => {
        const v = (cell.getValue() as string).toLowerCase();
        const active = v === "active";
        return (
          <span
            style={{
              backgroundColor: active ? "#2BCBC11A" : "#ff00001A",
              color: active ? "#2BCBC1" : "#ff0000",
              padding: "0.25rem 0.5rem",
              borderRadius: "20px",
            }}
          >
            {active ? "Enabled" : "Inactive"}
          </span>
        );
      },
    },
    { accessorKey: "accountType", header: "Account Type" },
  ];

  const headCellsEntitlements = [
    { accessorKey: "entitlementName", header: "Name" },
    { accessorKey: "entitlementDescription", header: "Description" },
    { accessorKey: "entitlementOwner", header: "Owner" },
    { accessorKey: "isPrivileged", header: "Privileged" },
  ];

  const openDrawer = (row: any) => {
    setDrawerData(row);
    setDrawerOpen(true);
  };

  const deleteAccount = async (accountName: string) => {
    try {
      await axios.post(
        "http://mc.shashwat.com:69696/restService/one/Delete",
        { accountName }
      );
      loadAllAccounts();
      setDrawerOpen(false);
    } catch {
      alert("Failed to delete account");
    }
  };

  return (
    <div className={styles.container}>
      <Box sx={{ display: "flex", justifyContent: "space-between", alignItems: "center", mb: 2, flexWrap: "wrap", gap: 2 }}>
        <Typography fontFamily="Poppins" sx={{ fontWeight: 500, fontSize: 20, color: "white" }}>
          Entitlement Users
        </Typography>
        <Grid container spacing={1} alignItems="center" sx={{ flex: 1, maxWidth: 600 }}>
          <Grid item xs={12} sm={6}>
            <TextField
              size="small"
              fullWidth
              placeholder={activeTab === "1" ? "Search by owner/name" : "Search entitlement name"}
              value={searchTerm}
              onChange={(e) => setSearchTerm(e.target.value)}
              InputProps={{
                startAdornment: (
                  <InputAdornment position="start">
                    <SearchIcon sx={{ color: "#CBCBCB" }} />
                  </InputAdornment>
                ),
                sx: { backgroundColor: "#1E252D", color: "white", borderRadius: 2 },
              }}
            />
          </Grid>
          <Grid item xs={6} sm={3}>
            <Button
              variant="contained"
              size="small"
              fullWidth
              onClick={handleSearch}
              sx={{
                background: "linear-gradient(90deg, #007BFF 0%, #3399FF 100%)",
                color: "white",
                fontWeight: 600,
                borderRadius: 2,
                height: 36,
                textTransform: "none"
              }}
            >
              Search
            </Button>
          </Grid>
        </Grid>
        <Autocomplete
          size="small"
          sx={{ width: 250 }}
          options={appList}
          value={selectedApp}
          onChange={(event, newValue) => {
            if (newValue) setSelectedApp(newValue);
          }}
          renderInput={(params) => (
            <TextField
              {...params}
              label="Select App"
              InputProps={{
                ...params.InputProps,
                sx: { backgroundColor: "#1E252D", color: "white" },
              }}
              InputLabelProps={{ sx: { color: "#CBCBCB" } }}
            />
          )}
        />
        {activeTab === "1" && (
          <Button
            variant="contained"
            startIcon={<AddCircleIcon />}
            onClick={() => onNavigate?.("create-account")}
            sx={{ height: 36, fontWeight: 600, fontSize: 12 }}
          >
            Create Account
          </Button>
        )}
      </Box>

      <Tabs
        activeKey={activeTab}
        onChange={(k) => {
          setActiveTab(k as "1" | "2");
          setSearchTerm("");
          setDrawerOpen(false);
        }}
        className={styles.tabs}
      >
        <TabPane key="1" tab={<span style={{ fontWeight: 600, color: activeTab === "1" ? "#007BFF" : "#8D8D8D" }}>Accounts</span>} />
        <TabPane key="2" tab={<span style={{ fontWeight: 600, color: activeTab === "2" ? "#007BFF" : "#8D8D8D" }}>Entitlements</span>} />
      </Tabs>

      <Box className={styles.tableSection}>
        {loading ? (
          <Box sx={{ textAlign: "center", p: 4 }}>
            <CircularProgress sx={{ color: "white" }} />
          </Box>
        ) : error ? (
          <Typography sx={{ color: "red", textAlign: "center" }}>{error}</Typography>
        ) : (
          <Box sx={{ border: "1px solid #444", p: 2, borderRadius: 1, bgcolor: "#1A2028", mt: 2 }}>
            <MaterialTable
              tableRows={activeTab === "1" ? accounts : entitlements}
              tableCols={activeTab === "1" ? headCellsAccounts : headCellsEntitlements}
              globalSearch={false}
              onRowClick={(r) => openDrawer(r as any)}
            />
          </Box>
        )}
      </Box>

      <Drawer
        anchor="right"
        open={drawerOpen}
        onClose={() => setDrawerOpen(false)}
        sx={{ "& .MuiDrawer-paper": { width: 420, bgcolor: "#1A2028", p: 3, borderLeft: "1px solid #2F3A45" } }}
      >
        {drawerData && (
          <>
            <Typography variant="h6" sx={{ color: "white", fontWeight: 600, mb: 1 }}>
              {drawerData.accountName || drawerData.entitlementName}
            </Typography>
            <Divider sx={{ bgcolor: "#2F3A45", mb: 2 }} />

            <Box sx={{ bgcolor: "#1E252D", p: 2, borderRadius: 1 }}>
              {activeTab === "1" ? (
                <>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Owner</Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>{drawerData.accountOwner}</Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Roles</Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>
                    {drawerData.accessRoles.map((r: any) => r.roleName).join(", ")}
                  </Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Status</Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>{drawerData.accountStatus}</Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Type</Typography>
                  <Typography sx={{ color: "white" }}>{drawerData.accountType}</Typography>
                </>
              ) : (
                <>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Description</Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>{drawerData.entitlementDescription}</Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Owner</Typography>
                  <Typography sx={{ color: "white", mb: 1 }}>{drawerData.entitlementOwner}</Typography>
                  <Typography sx={{ color: "#8D8D8D", mb: .5 }}>Privileged</Typography>
                  <Typography sx={{ color: "white" }}>{drawerData.isPrivileged}</Typography>
                </>
              )}
            </Box>

            {activeTab === "1" && (
              <Box sx={{ mt: 2, display: "flex", justifyContent: "flex-end", gap: 1 }}>
                <Button
                  variant="outlined"
                  startIcon={<DeleteIcon />}
                  sx={{ color: "white", borderColor: "white", textTransform: "none" }}
                  onClick={() => deleteAccount(drawerData.accountName)}
                >
                  Delete
                </Button>
                <Button
                  variant="contained"
                  startIcon={<EditIcon />}
                  sx={{ textTransform: "none" }}
                  onClick={() => onEditAccount?.(drawerData.accountOwner)}
                >
                  Edit
                </Button>
              </Box>
            )}
          </>
        )}
      </Drawer>
    </div>
  );
}
