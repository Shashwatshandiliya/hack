import * as React from "react";
import Grid from "@mui/material/Grid";
import IconButton from "@mui/material/IconButton";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import Typography from "@mui/material/Typography";
import TextField from "@mui/material/TextField";
import Select from "@mui/material/Select";
import MenuItem from "@mui/material/MenuItem";
import FormControl from "@mui/material/FormControl";
import InputLabel from "@mui/material/InputLabel";
import Checkbox from "@mui/material/Checkbox";
import FormControlLabel from "@mui/material/FormControlLabel";
import InputAdornment from "@mui/material/InputAdornment";
import CalendarTodayIcon from "@mui/icons-material/CalendarToday";
import SearchIcon from "@mui/icons-material/Search";
import styles from "./ReportsView.module.css";
import axios from "axios";
import { saveAs } from "file-saver";
import * as XLSX from "xlsx";
import CircularProgress from "@mui/material/CircularProgress";

interface Application {
  appUID: number;
  appName: string;
  appDesc: string;
  appOwner: string;
}

interface Account {
  accountName: string;
  accountOwner: string;
  accountType: string;
  accountStatus: string;
  accountDescription: string;
  isPrivileged: string;
  lastLogin: string;
  accessRoles: {
    roleName: string;
    entitlementName: string;
    entitlementDescription: string;
    entitlementOwner: string;
    isPrivileged: string;
  }[];
  applicationName: string;
  lastUpdated: string;
}

interface ReportField {
  id: string;
  label: string;
  selected: boolean;
}

const ReportsView: React.FC = () => {
  const [applications, setApplications] = React.useState<Application[]>([]);
  const [selectedApplication, setSelectedApplication] = React.useState<string>("");
  const [reportFormat, setReportFormat] = React.useState<"csv" | "excel" | "json">("csv");
  const [startDate, setStartDate] = React.useState<string>("");
  const [endDate, setEndDate] = React.useState<string>("");
  const [bankId, setBankId] = React.useState<string>("");
  const [previewData, setPreviewData] = React.useState<any[]>([]);
  const [isLoading, setIsLoading] = React.useState<boolean>(false);
  const [accounts, setAccounts] = React.useState<Account[]>([]);
  const [isFetchingAccounts, setIsFetchingAccounts] = React.useState<boolean>(false);

  const [reportFields, setReportFields] = React.useState<ReportField[]>([
    { id: "accountName", label: "Account Name", selected: true },
    { id: "accountOwner", label: "Account Owner", selected: true },
    { id: "accountType", label: "Account Type", selected: true },
    { id: "accountStatus", label: "Account Status", selected: true },
    { id: "isPrivileged", label: "Is Privileged", selected: true },
    { id: "lastLogin", label: "Last Login", selected: true },
    { id: "applicationName", label: "Application", selected: true },
    { id: "roles", label: "Roles", selected: false },
    { id: "entitlements", label: "Entitlements", selected: false },
    { id: "lastUpdated", label: "Last Updated", selected: false },
  ]);

  // Fetch applications
  React.useEffect(() => {
    const fetchApplications = async () => {
      try {
        setIsLoading(true);
        const resp = await axios.get<Application[]>(
          "https://uklvauems02a.uk.standardchartered.com:32442/fmces/v1/application/all"
        );
        setApplications(resp.data);
        if (resp.data.length > 0) {
          setSelectedApplication(resp.data[0].appName);
        }
      } catch (error) {
        console.error("Error fetching applications", error);
      } finally {
        setIsLoading(false);
      }
    };

    fetchApplications();
  }, []);

  // Fetch accounts when application changes
  React.useEffect(() => {
    if (selectedApplication) {
      fetchAccountsForApplication(selectedApplication);
    }
  }, [selectedApplication]);

  const fetchAccountsForApplication = async (appName: string) => {
    try {
      setIsFetchingAccounts(true);
      const response = await axios.get(
        "https://uklvauems02a.uk.standardchartered.com:32447/restService/onecert/v1/account",
        {
          headers: { applicationName: appName }
        }
      );
      setAccounts(response.data.accounts || []);
    } catch (error) {
      console.error("Error fetching accounts", error);
      setAccounts([]);
    } finally {
      setIsFetchingAccounts(false);
    }
  };

  const handleFieldToggle = (id: string) => {
    setReportFields(fields => 
      fields.map(field => 
        field.id === id ? { ...field, selected: !field.selected } : field
      )
    );
  };

  const handlePreview = () => {
    // Filter accounts based on bank ID
    let filteredAccounts = [...accounts];
    
    if (bankId) {
      filteredAccounts = filteredAccounts.filter(account => 
        account.accountOwner.toLowerCase().includes(bankId.toLowerCase()) ||
        account.accountName.toLowerCase().includes(bankId.toLowerCase())
      );
    }
    
    // Select only the chosen fields
    const selectedFields = reportFields.filter(f => f.selected).map(f => f.id);
    const preview = filteredAccounts.map(account => {
      const result: any = {};
      
      selectedFields.forEach(field => {
        if (field === "roles") {
          result[field] = account.accessRoles.map(role => role.roleName).join(", ");
        } else if (field === "entitlements") {
          result[field] = account.accessRoles.map(role => role.entitlementName).join(", ");
        } else {
          result[field] = (account as any)[field] || "N/A";
        }
      });
      
      return result;
    });
    
    setPreviewData(preview);
  };

  const handleDownload = () => {
    if (previewData.length === 0) {
      alert("No data to download. Please generate a preview first.");
      return;
    }
    
    const selectedFields = reportFields.filter(f => f.selected).map(f => f.id);
    const headers = reportFields
      .filter(f => f.selected)
      .map(f => f.label);
    
    switch (reportFormat) {
      case "csv":
        downloadCSV(previewData, headers, selectedFields);
        break;
      case "excel":
        downloadExcel(previewData, headers, selectedFields);
        break;
      case "json":
        downloadJSON(previewData);
        break;
    }
  };

  const downloadCSV = (data: any[], headers: string[], fields: string[]) => {
    const csvRows = [];
    
    // Add headers
    csvRows.push(headers.join(","));
    
    // Add data rows
    data.forEach(item => {
      const row = fields.map(field => {
        const value = item[field];
        return typeof value === "string" ? `"${value.replace(/"/g, '""')}"` : value;
      });
      csvRows.push(row.join(","));
    });
    
    const csvString = csvRows.join("\n");
    const blob = new Blob([csvString], { type: "text/csv;charset=utf-8;" });
    saveAs(blob, `${selectedApplication}_accounts_${new Date().toISOString().slice(0, 10)}.csv`);
  };

  const downloadExcel = (data: any[], headers: string[], fields: string[]) => {
    const worksheet = XLSX.utils.json_to_sheet(
      data.map(item => {
        const row: any = {};
        headers.forEach((header, index) => {
          row[header] = item[fields[index]];
        });
        return row;
      })
    );
    
    const workbook = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(workbook, worksheet, "Accounts");
    XLSX.writeFile(workbook, `${selectedApplication}_accounts_${new Date().toISOString().slice(0, 10)}.xlsx`);
  };

  const downloadJSON = (data: any[]) => {
    const jsonString = JSON.stringify(data, null, 2);
    const blob = new Blob([jsonString], { type: "application/json" });
    saveAs(blob, `${selectedApplication}_accounts_${new Date().toISOString().slice(0, 10)}.json`);
  };

  return (
    <div className={styles.container}>
      {/* Header */}
      <div className={styles.header}>
        <Grid container alignItems="center" justifyContent="space-between">
          <Typography sx={{ fontWeight: 500, fontSize: 20 }}>Reports</Typography>
        </Grid>
      </div>

      {/* Report Configuration */}
      <div className={styles.configSection}>
        <Box sx={{ border: '1px solid #444', p: 2, borderRadius: 1, backgroundColor: '#1A2028' }}>
          <Typography variant="h6" sx={{ color: 'white', mb: 2 }}>Generate Account Report</Typography>
          
          <Grid container spacing={3}>
            {/* Application Selection */}
            <Grid item xs={4}>
              <FormControl fullWidth size="small">
                <InputLabel sx={{ color: '#FFF' }}>Application</InputLabel>
                <Select
                  value={selectedApplication}
                  onChange={(e) => setSelectedApplication(e.target.value as string)}
                  sx={{ 
                    backgroundColor: '#1E252D', 
                    color: 'white',
                    '& .MuiSelect-icon': { color: 'white' }
                  }}
                >
                  {applications.map((app) => (
                    <MenuItem key={app.appUID} value={app.appName}>
                      {app.appName}
                    </MenuItem>
                  ))}
                </Select>
              </FormControl>
              {isFetchingAccounts && (
                <Box sx={{ display: 'flex', alignItems: 'center', mt: 1 }}>
                  <CircularProgress size={20} sx={{ color: '#2BCBC1', mr: 1 }} />
                  <Typography variant="caption" sx={{ color: '#888' }}>
                    Loading accounts...
                  </Typography>
                </Box>
              )}
            </Grid>
            
            {/* Report Format */}
            <Grid item xs={4}>
              <FormControl fullWidth size="small">
                <InputLabel sx={{ color: '#FFF' }}>Format</InputLabel>
                <Select
                  value={reportFormat}
                  onChange={(e) => setReportFormat(e.target.value as any)}
                  sx={{ 
                    backgroundColor: '#1E252D', 
                    color: 'white',
                    '& .MuiSelect-icon': { color: 'white' }
                  }}
                >
                  <MenuItem value="csv">CSV</MenuItem>
                  <MenuItem value="excel">Excel</MenuItem>
                  <MenuItem value="json">JSON</MenuItem>
                </Select>
              </FormControl>
            </Grid>
            
            {/* Bank ID Search */}
            <Grid item xs={4}>
              <TextField
                label="Search by Bank ID or Account"
                size="small"
                fullWidth
                value={bankId}
                onChange={(e) => setBankId(e.target.value)}
                InputProps={{
                  startAdornment: (
                    <InputAdornment position="start">
                      <SearchIcon sx={{ color: '#FFF' }} />
                    </InputAdornment>
                  ),
                  sx: { color: 'white' }
                }}
                sx={{ backgroundColor: '#1E252D', borderRadius: 1 }}
              />
            </Grid>
            
            {/* Custom Fields */}
            <Grid item xs={12}>
              <Typography variant="subtitle1" sx={{ color: 'white', mb: 1 }}>
                Select Fields to Include
              </Typography>
              <Box sx={{ 
                backgroundColor: '#1E252D', 
                p: 2, 
                borderRadius: 1,
                maxHeight: 200,
                overflowY: 'auto'
              }}>
                <Grid container spacing={2}>
                  {reportFields.map((field) => (
                    <Grid item xs={4} key={field.id}>
                      <FormControlLabel
                        control={
                          <Checkbox
                            checked={field.selected}
                            onChange={() => handleFieldToggle(field.id)}
                            sx={{ color: '#2BCBC1' }}
                          />
                        }
                        label={
                          <Typography sx={{ color: 'white', fontSize: 14 }}>
                            {field.label}
                          </Typography>
                        }
                      />
                    </Grid>
                  ))}
                </Grid>
              </Box>
            </Grid>
            
            {/* Action Buttons */}
            <Grid item xs={12}>
              <Box sx={{ display: 'flex', justifyContent: 'flex-end', gap: 2 }}>
                <Button 
                  variant="outlined" 
                  sx={{ 
                    color: 'white', 
                    borderColor: 'white',
                    '&:hover': { borderColor: '#2BCBC1', color: '#2BCBC1' }
                  }}
                  onClick={handlePreview}
                  disabled={isLoading || accounts.length === 0}
                >
                  Preview
                </Button>
                <Button 
                  variant="contained" 
                  sx={{ backgroundColor: '#2BCBC1', '&:hover': { backgroundColor: '#1da59a' } }}
                  onClick={handleDownload}
                  disabled={isLoading || previewData.length === 0}
                >
                  Download
                </Button>
              </Box>
            </Grid>
          </Grid>
        </Box>
      </div>

      {/* Preview Section */}
      {previewData.length > 0 && (
        <div className={styles.previewSection}>
          <Box sx={{ border: '1px solid #444', p: 2, borderRadius: 1, mt: 2, backgroundColor: '#1A2028' }}>
            <Typography variant="h6" sx={{ color: 'white', mb: 2 }}>
              Preview ({previewData.length} accounts)
            </Typography>
            
            <Box sx={{ 
              backgroundColor: '#262B36', 
              p: 2, 
              borderRadius: 1,
              maxHeight: 400,
              overflowY: 'auto'
            }}>
              <table className={styles.previewTable}>
                <thead>
                  <tr>
                    {reportFields
                      .filter(f => f.selected)
                      .map(field => (
                        <th key={field.id}>{field.label}</th>
                      ))}
                  </tr>
                </thead>
                <tbody>
                  {previewData.slice(0, 10).map((row, index) => (
                    <tr key={index}>
                      {reportFields
                        .filter(f => f.selected)
                        .map(field => (
                          <td key={`${index}-${field.id}`}>
                            {row[field.id] || "N/A"}
                          </td>
                        ))}
                    </tr>
                  ))}
                  {previewData.length > 10 && (
                    <tr>
                      <td colSpan={reportFields.filter(f => f.selected).length} style={{ textAlign: 'center' }}>
                        ... and {previewData.length - 10} more accounts
                      </td>
                    </tr>
                  )}
                </tbody>
              </table>
            </Box>
          </Box>
        </div>
      )}

      {/* Account Count */}
      {accounts.length > 0 && previewData.length === 0 && (
        <Box sx={{ mt: 2, textAlign: 'center' }}>
          <Typography sx={{ color: '#888' }}>
            {accounts.length} accounts loaded for {selectedApplication}. Click "Preview" to generate a report.
          </Typography>
        </Box>
      )}
    </div>
  );
};

export default ReportsView;
