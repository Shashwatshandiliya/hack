// src/components/EntitlementUserView/EntitlementUserView.tsx
import * as React from "react";
import axios from "axios";
import {
  Grid, Button, Box, Typography, CircularProgress,
  Divider, Select, MenuItem, FormControl, InputLabel, TextField
} from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import SearchIcon from "@mui/icons-material/Search";
import { Tabs } from "antd";
import Drawer from "@mui/material/Drawer";
import MaterialTable from "../../../Root/components/MaterialTable";
import styles from "./EntitlementUserView.module.css";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";

const { TabPane } = Tabs;

export default function EntitlementUserView({
  onNavigate,
  onEditAccount,
}: {
  onNavigate?: (tab: string) => void;
  onEditAccount?: (id: string) => void;
}) {
  const [activeTab, setActiveTab] = React.useState<"1" | "2">("1");
  const [appName, setAppName] = React.useState<string>("sail");
  const [apps, setApps] = React.useState<string[]>([]);
  const [drawerOpen, setDrawerOpen] = React.useState(false);
  const [drawerData, setDrawerData] = React.useState<any>(null);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [accounts, setAccounts] = React.useState<any[]>([]);
  const [entitlements, setEntitlements] = React.useState<any[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState("");

  React.useEffect(() => {
    loadApps();
  }, []);

  React.useEffect(() => {
    if (activeTab === "1") loadAccounts();
    else loadEntitlements();
  }, [activeTab, appName]);

  const loadApps = async () => {
    try {
      const res = await axios.get("http://mc.shashwat.com:69696/allappplciation");
      setApps(res.data.applications.map((a: any) => a.appName || a));
    } catch {
      setApps(["sail"]);
    }
  };

  const loadAccounts = async () => {
    setError(""); setLoading(true);
    try {
      const { data } = await axios.get(
        `http://mc.shashwat.com:69696/restService/one/aacc?applicationName=${appName}`
      );
      setAccounts(data.accounts || []);
    } catch {
      setError("Failed to load accounts");
    } finally {
      setLoading(false);
    }
  };

  const loadEntitlements = async () => {
    setError(""); setLoading(true);
    try {
      const { data } = await axios.get(
        `http://mc.shashwat.com:69696/restService/one/entity?applicationName=${appName}`
      );
      setEntitlements(data.entitlements || []);
    } catch {
      setError("Failed to load entitlements");
    } finally {
      setLoading(false);
    }
  };

  const handleSearch = async () => {
    if (!searchTerm) return activeTab === "1" ? loadAccounts() : loadEntitlements();
    setError(""); setLoading(true);
    try {
      const endpoint = activeTab === "1" ? "account" : "entitlement";
      const { data } = await axios.get(
        `http://mc.shashwat.com:69696/restService/one/${endpoint}/${searchTerm}?applicationName=${appName}`
      );
      const arr = Array.isArray(data) ? data : [data];
      activeTab === "1" ? setAccounts(arr) : setEntitlements(arr);
    } catch {
      setError("No results found");
    } finally {
      setLoading(false);
    }
  };

  const deleteAccount = async (accountName:string) => {
    try {
      await axios.post(
        "http://mc.shashwat.com:69696/restService/one/Delete",
        { accountName, applicationName: appName }
      );
      loadAccounts(); setDrawerOpen(false);
    } catch {
      alert("Deletion failed");
    }
  };

  // Table headers omitted for brevity â€” use prior version

  return (
    <div className={styles.container}>
      <Typography variant="h5" color="white" mb={2}>Entitlement Users</Typography>

      <Box display="flex" gap={2} alignItems="center" mb={2}>
        <FormControl size="small">
          <InputLabel color="secondary">Application</InputLabel>
          <Select
            value={appName}
            onChange={(e) => setAppName(e.target.value)}
            sx={{ width: 200, bgcolor: "#1E252D", color: "white", borderRadius: 1 }}
            label="Application"
          >
            {apps.map((a) => <MenuItem key={a} value={a}>{a}</MenuItem>)}
          </Select>
        </FormControl>
      </Box>

      <Tabs activeKey={activeTab} onChange={(k) => { setActiveTab(k as any); setDrawerOpen(false); }} className={styles.tabs}>
        <TabPane tab={<span style={{color: activeTab==="1"? "#007BFF":"#8D8D8D"}}>Accounts</span>} key="1"/>
        <TabPane tab={<span style={{color: activeTab==="2"? "#007BFF":"#8D8D8D"}}>Entitlements</span>} key="2"/>
      </Tabs>

      <Box className={styles.filterSection}>
        <Grid container spacing={2} alignItems="center">
          <Grid item xs>
            <TextField
              placeholder={activeTab==="1" ? "Search account" : "Search entitlement"}
              size="small" fullWidth value={searchTerm} onChange={e => setSearchTerm(e.target.value)}
              InputProps={{
                startAdornment: <InputAdornment position="start"><SearchIcon sx={{color:"#CBCBCB"}}/></InputAdornment>,
                sx: { bgcolor:"#1E252D", color:"white", borderRadius:1 }
              }}
            />
          </Grid>
          <Grid item>
            <Button variant="outlined" size="small" onClick={handleSearch} sx={{color:"white",borderColor:"white"}}>Search</Button>
          </Grid>
          <Grid item>
            <Button
              variant="contained" startIcon={<AddCircleIcon/>}
              onClick={() => onNavigate?.(activeTab==="1"?"create-account":"create-entitlement-user")}
              sx={{height:36,fontWeight:600}}
            >
              {activeTab==="1"?"Create Account":"Create Entitlement"}
            </Button>
          </Grid>
        </Grid>
      </Box>

      <Box className={styles.tableSection}>
        {loading 
          ? <CircularProgress sx={{color:"white",mt:4}}/>
          : error 
            ? <Typography color="error" align="center">{error}</Typography>
            : (
              <MaterialTable
                tableRows={activeTab==="1" ? accounts : entitlements}
                tableCols={activeTab==="1" ? /* headCellsAccounts */ [] : /* headCellsEntitlements */ []}
                globalSearch={false}
                onRowClick={openDrawer}
              />
            )}
      </Box>

      <Drawer open={drawerOpen} onClose={() => setDrawerOpen(false)} sx={{
        "& .MuiDrawer-paper": { width:420, bgcolor:"#1A2028", p:3, borderLeft:"1px solid #2F3A45" }
      }}>
        {drawerData && (
          <>
            <Typography variant="h6" color="white" mb={1}>
              {drawerData.accountName || drawerData.entitlementName}
            </Typography>
            <Divider sx={{bgcolor:"#2F3A45",mb:2}}/>

            <Box sx={{bgcolor:"#1E252D",p:2,borderRadius:1}}>
              {activeTab==="1" ? (
                <>
                  {["Owner","Roles","Status","Type"].map((label, i) => (
                    <React.Fragment key={i}>
                      <Typography color="#8D8D8D" mb={0.5}>{label}</Typography>
                      <Typography color="white" mb={1}>
                        {label==="Roles"
                          ? drawerData.accessRoles.map((r:any) => r.roleName).join(", ")
                          : drawerData[label.toLowerCase()] || drawerData.accountOwner}
                      </Typography>
                    </React.Fragment>
                  ))}
                </>
              ) : (
                <>
                  {["Description","Owner","Privileged"].map((label, i) => (
                    <React.Fragment key={i}>
                      <Typography color="#8D8D8D" mb={0.5}>{label}</Typography>
                      <Typography color="white" mb={1}>
                        {drawerData[`entitlement${label}`] || drawerData[`isPrivileged`]}
                      </Typography>
                    </React.Fragment>
                  ))}
                </>
              )}
            </Box>

            {activeTab==="1" && (
              <Box mt={2} display="flex" justifyContent="flex-end" gap={1}>
                <Button
                  variant="outlined" startIcon={<DeleteIcon/>}
                  sx={{color:"white",borderColor:"white"}}
                  onClick={() => deleteAccount(drawerData.accountName)}
                >
                  Delete
                </Button>
                <Button
                  variant="contained" startIcon={<EditIcon/>}
                  onClick={() => onEditAccount?.(drawerData.accountOwner)}
                >
                  Edit
                </Button>
              </Box>
            )}
          </>
        )}
      </Drawer>
    </div>
  );
}
