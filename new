// src/components/EntitlementUserView/EntitlementUserView.tsx
import * as React from "react";
import axios from "axios";
import Grid from "@mui/material/Grid";
import Button from "@mui/material/Button";
import Box from "@mui/material/Box";
import MaterialTable from "../../../Root/components/MaterialTable";
import {
  InputAdornment,
  TextField,
  Typography,
  CircularProgress,
  Divider,
  MenuItem,
  Select,
  FormControl,
  SelectChangeEvent,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogContentText,
  DialogActions,
} from "@mui/material";
import AddCircleIcon from "@mui/icons-material/AddCircle";
import SearchIcon from "@mui/icons-material/Search";
import { Tabs } from "antd";
import Drawer from "@mui/material/Drawer";
import styles from "./EntitlementUserView.module.css";
import EditIcon from "@mui/icons-material/Edit";
import DeleteIcon from "@mui/icons-material/Delete";

const { TabPane } = Tabs;

interface AccountRow {
  accountOwner: string;
  accountName: string;
  accountType: string;
  accessRoles: { roleName: string }[];
  accountStatus: string;
}

interface EntitlementRow {
  entitlementName: string;
  entitlementDescription: string;
  entitlementOwner: string;
  isPrivileged: string;
}

export default function EntitlementUserView({
  onNavigate,
  onEditAccount,
}: {
  onNavigate?: (tab: string) => void;
  onEditAccount?: (id: string) => void;
}) {
  const [activeTab, setActiveTab] = React.useState<"1" | "2">("1");
  const [drawerOpen, setDrawerOpen] = React.useState(false);
  const [drawerData, setDrawerData] = React.useState<any>(null);
  const [searchTerm, setSearchTerm] = React.useState("");
  const [selectedApp, setSelectedApp] = React.useState("SAIL");
  const [appList, setAppList] = React.useState<string[]>([]);
  const [accounts, setAccounts] = React.useState<AccountRow[]>([]);
  const [entitlements, setEntitlements] = React.useState<EntitlementRow[]>([]);
  const [loading, setLoading] = React.useState(false);
  const [error, setError] = React.useState("");
  const [confirmDeleteOpen, setConfirmDeleteOpen] = React.useState(false);

  const loadAppList = async () => {
    try {
      const { data } = await axios.get("http://mc.shashwat.com:69696/allappplciation");
      setAppList(data.map((app: any) => app.appName));
    } catch {
      setAppList(["SAIL"]);
    }
  };

  const loadAllAccounts = async () => {
    setError("");
    try {
      setLoading(true);
      const { data } = await axios.get("http://mc.shashwat.com:69696/restService/one/aacc", {
        headers: { applicationName: selectedApp },
      });
      setAccounts(data.accounts || []);
    } catch {
      setError("Failed to load accounts");
    } finally {
      setLoading(false);
    }
  };

  const loadAllEntitlements = async () => {
    setError("");
    try {
      setLoading(true);
      const { data } = await axios.get("http://mc.shashwat.com:69696/restService/one/entity", {
        headers: { applicationName: selectedApp },
      });
      setEntitlements(data.entitlements || []);
    } catch {
      setError("Failed to load entitlements");
    } finally {
      setLoading(false);
    }
  };

  React.useEffect(() => {
    loadAppList();
  }, []);

  React.useEffect(() => {
    if (activeTab === "1") loadAllAccounts();
    else loadAllEntitlements();
  }, [activeTab, selectedApp]);

  const handleSearch = async () => {
    setError("");
    if (!searchTerm) {
      activeTab === "1" ? loadAllAccounts() : loadAllEntitlements();
      return;
    }
    try {
      setLoading(true);
      if (activeTab === "1") {
        const { data } = await axios.get(
          `http://mc.shashwat.com:69696/restService/one/account/${searchTerm}`
        );
        setAccounts(data ? [data] : []);
      } else {
        const { data } = await axios.get(
          `http://mc.shashwat.com:69696/restService/one/entitlement/${searchTerm}`
        );
        setEntitlements(data ? [data] : []);
      }
    } catch {
      setError("No results found");
    } finally {
      setLoading(false);
    }
  };

  const deleteAccount = async () => {
    try {
      const { data } = await axios.post(
        `http://mc.shashwat.com:69696/restService/one/Delete`,
        { accountName: drawerData.accountName },
        {
          headers: { applicationName: selectedApp },
        }
      );
      loadAllAccounts();
      setDrawerOpen(false);
      setConfirmDeleteOpen(false);
    } catch (err: any) {
      setConfirmDeleteOpen(false);
      alert(err?.response?.data?.statusMessage || "Failed to delete account");
    }
  };

  return (
    <>
      {/* Existing JSX */}

      <Dialog
        open={confirmDeleteOpen}
        onClose={() => setConfirmDeleteOpen(false)}
      >
        <DialogTitle>Confirm Deletion</DialogTitle>
        <DialogContent>
          <DialogContentText>
            Are you sure you want to delete account "{drawerData?.accountName}"?
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={() => setConfirmDeleteOpen(false)} color="primary">
            Cancel
          </Button>
          <Button onClick={deleteAccount} color="error">
            Delete
          </Button>
        </DialogActions>
      </Dialog>

      {/* Inside Drawer action buttons */}
      {activeTab === "1" && (
        <Box sx={{ mt: 2, display: "flex", justifyContent: "flex-end", gap: 1 }}>
          <Button
            variant="outlined"
            startIcon={<DeleteIcon />}
            sx={{ color: "white", borderColor: "white", textTransform: "none" }}
            onClick={() => setConfirmDeleteOpen(true)}
          >
            Delete
          </Button>
          <Button
            variant="contained"
            startIcon={<EditIcon />}
            sx={{ textTransform: "none" }}
            onClick={() => onEditAccount?.(drawerData.accountOwner)}
          >
            Edit
          </Button>
        </Box>
      )}
    </>
  );
}
