import React, { useState, useEffect } from 'react';
import axios from 'axios';
import {
  Box,
  Button,
  TextField,
  Typography,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  Checkbox,
  ListItemText,
  OutlinedInput,
  RadioGroup,
  FormControlLabel,
  Radio,
  CircularProgress,
} from '@mui/material';
import { DatePicker } from '@mui/lab';
import FileSaver from 'file-saver';
import * as XLSX from 'xlsx';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import styles from './ReportsPage.module.css';

const FIELD_OPTIONS = [
  'appUID',
  'itamID',
  'itamName',
  'appName',
  'appOwner',
  'createdDate',
  'lastUpdated',
];
const FORMAT_OPTIONS = ['csv', 'excel', 'pdf', 'json'];

export default function ReportsPage() {
  const [apps, setApps] = useState([]);
  const [selectedApp, setSelectedApp] = useState('all');
  const [fields, setFields] = useState(FIELD_OPTIONS);
  const [format, setFormat] = useState('csv');
  const [fromDate, setFromDate] = useState(null);
  const [toDate, setToDate] = useState(null);
  const [bankId, setBankId] = useState('');
  const [previewData, setPreviewData] = useState([]);
  const [loading, setLoading] = useState(false);

  useEffect(() => {
    axios
      .get('https://uklvauems02a.uk.standardchartered.com:32442/fmces/v1/application/all')
      .then(({ data }) => setApps(data))
      .catch(console.error);
  }, []);

  const fetchData = async () => {
    // you can modify endpoint or logic to fetch filtered data
    const response = await axios.post('/api/reports/preview', {
      application: selectedApp,
      fields,
      fromDate,
      toDate,
      bankId,
    });
    return response.data;
  };

  const handlePreview = async () => {
    setLoading(true);
    try {
      const data = await fetchData();
      setPreviewData(data);
    } finally {
      setLoading(false);
    }
  };

  const handleDownload = async () => {
    setLoading(true);
    try {
      const data = previewData.length ? previewData : await fetchData();
      if (!data || !data.length) return;

      // prepare rows and columns
      const rows = data.map((item) => fields.map((f) => item[f]));
      const header = fields;

      switch (format) {
        case 'csv': {
          const csvContent = [header.join(','), ...rows.map((r) => r.join(','))].join('\n');
          const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
          FileSaver.saveAs(blob, 'report.csv');
          break;
        }
        case 'excel': {
          const ws = XLSX.utils.aoa_to_sheet([header, ...rows]);
          const wb = XLSX.utils.book_new();
          XLSX.utils.book_append_sheet(wb, ws, 'Report');
          const wbout = XLSX.write(wb, { bookType: 'xlsx', type: 'array' });
          const blob = new Blob([wbout], { type: 'application/octet-stream' });
          FileSaver.saveAs(blob, 'report.xlsx');
          break;
        }
        case 'json': {
          const blob = new Blob([JSON.stringify(data, null, 2)], { type: 'application/json' });
          FileSaver.saveAs(blob, 'report.json');
          break;
        }
        case 'pdf': {
          const doc = new jsPDF();
          doc.autoTable({ head: [header], body: rows });
          doc.save('report.pdf');
          break;
        }
        default:
          break;
      }
    } finally {
      setLoading(false);
    }
  };

  return (
    <Box className={styles.container} p={3}>
      <Typography variant="h4" gutterBottom>
        Reports
      </Typography>

      <FormControl fullWidth margin="normal">
        <InputLabel>Application</InputLabel>
        <Select
          value={selectedApp}
          label="Application"
          onChange={(e) => setSelectedApp(e.target.value)}
        >
          <MenuItem value="all">All Applications</MenuItem>
          {apps.map((app) => (
            <MenuItem key={app.appUID} value={app.appName}>
              {app.appName}
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <FormControl fullWidth margin="normal">
        <InputLabel>Fields</nputLabel>
        <Select
          multiple
          value={fields}
          onChange={(e) => setFields(e.target.value)}
          input={<OutlinedInput label="Fields" />}
          renderValue={(selected) => selected.join(', ')}
        >
          {FIELD_OPTIONS.map((name) => (
            <MenuItem key={name} value={name}>
              <Checkbox checked={fields.includes(name)} />
              <ListItemText primary={name} />
            </MenuItem>
          ))}
        </Select>
      </FormControl>

      <FormControl component="fieldset" margin="normal">
        <Typography component="legend">Format</Typography>
        <RadioGroup row value={format} onChange={(e) => setFormat(e.target.value)}>
          {FORMAT_OPTIONS.map((opt) => (
            <FormControlLabel
              key={opt}
              value={opt}
              control={<Radio />}
              label={opt.toUpperCase()}
            />
          ))}
        </RadioGroup>
      </FormControl>

      <Box display="flex" gap={2} mt={2}>
        <DatePicker
          label="From"
          value={fromDate}
          onChange={setFromDate}
          renderInput={(params) => <TextField {...params} />}
        />
        <DatePicker
          label="To"
          value={toDate}
          onChange={setToDate}
          renderInput={(params) => <TextField {...params} />}
        />
      </Box>

      <TextField
        fullWidth
        margin="normal"
        label="Bank ID"
        value={bankId}
        onChange={(e) => setBankId(e.target.value)}
      />

      <Box mt={3} display="flex" gap={2}>
        <Button variant="outlined" onClick={handlePreview} disabled={loading}>
          {loading ? <CircularProgress size={24} /> : 'Preview'}
        </Button>
        <Button variant="contained" onClick={handleDownload} disabled={loading}>
          {loading ? <CircularProgress size={24} /> : 'Download'}
        </Button>
      </Box>

      {previewData.length > 0 && (
        <Box mt={4}>
          <Typography variant="h6">Preview</Typography>
          <pre className={styles.previewBox}>
            {JSON.stringify(previewData, null, 2)}
          </pre>
        </Box>
      )}
    </Box>
  );
}
